(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/js/main.js":[function(require,module,exports){
'use strict';

var height = 648;
var width = height*16/9;
var game = new Phaser.Game(width, height, Phaser.AUTO, 'roosevelt-game');

window.Utils = require('./utils');
window.playerState = {currentLevel: 'Game'};

game.state.add('Boot', require('./states/boot'));
game.state.add('Splash', require('./states/splash'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
game.state.add('Game', require('./states/game'));

game.state.start('Boot');

},{"./states/boot":"/Users/moret/dev/roosevelt/src/js/states/boot.js","./states/game":"/Users/moret/dev/roosevelt/src/js/states/game.js","./states/menu":"/Users/moret/dev/roosevelt/src/js/states/menu.js","./states/preloader":"/Users/moret/dev/roosevelt/src/js/states/preloader.js","./states/splash":"/Users/moret/dev/roosevelt/src/js/states/splash.js","./utils":"/Users/moret/dev/roosevelt/src/js/utils.js"}],"/Users/moret/dev/roosevelt/src/js/entities/player.js":[function(require,module,exports){
var Player = function (game, x, y) {
  Phaser.Sprite.call(this, game, x, y, 'ninja', 'Idle__001.png');
  game.add.existing(this);
  this.anchor.setTo(0.5, 0.55);

  this.attackAnimation = this.animations.add(
    'attack', Phaser.Animation.generateFrameNames('Attack__', 1, 10, '.png', 3),
    24, false, false
  );
  this.attackAnimation.onComplete.add(this.attackFinished, this);

  this.animations.add(
    'run', Phaser.Animation.generateFrameNames('Run__', 1, 10, '.png', 3),
    24, true, false
  );

  this.animations.add(
    'idle', Phaser.Animation.generateFrameNames('Idle__', 1, 9, '.png', 3),
    6, true, false
  );

  this.animations.play('idle');
}

Player.prototype = Object.create(Phaser.Sprite.prototype);
Player.prototype.constructor = Player;

Player.prototype.update = function() {
  this.isMovingRight = false;

  if (this.willAttack) {
    this.animations.play('attack');
    this.isAttacking = true;
    this.anchor.setTo(0.3, 0.5);
  }

  if (!this.isAttacking) {
    if (this.rightKey.isDown || this.leftKey.isDown) {
      this.isMovingRight = true;
      this.anchor.setTo(0.5, 0.5);
      this.animations.play('run');
    } else {
      this.anchor.setTo(0.5, 0.55);
      this.animations.play('idle');
    }
  }

  this.willAttack = false;
};

Player.prototype.attackFinished = function() {
  this.animations.play('idle');
  this.isAttacking = false;
};

Player.prototype.onAttackInput = function () {
  this.willAttack = true;
};

module.exports = Player;

},{}],"/Users/moret/dev/roosevelt/src/js/states/boot.js":[function(require,module,exports){
var Boot = function () {};

Boot.prototype = {
  preload: function () {
    this.load.image('preloader', 'assets/preloader.gif');
  },

  create: function () {
    this.game.input.maxPointers = 1;

    if (this.game.device.desktop) {
      this.game.stage.scale.pageAlignHorizontally = true;
    } else {
      this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.game.scale.minWidth = 480;
      this.game.scale.minHeight = 260;
      this.game.scale.maxWidth = 640;
      this.game.scale.maxHeight = 480;
      this.game.scale.forceLandscape = true;
      this.game.scale.pageAlignHorizontally = true;
      this.game.scale.setScreenSize(true);
    }

    this.game.state.start('Preloader');
  }
};

module.exports = Boot;

},{}],"/Users/moret/dev/roosevelt/src/js/states/game.js":[function(require,module,exports){
var Player = require('../entities/player');

var Game = function () {
  this.testentity = null;
  this.backgroundSpeed = 0.2;
  this.foregroundSpeed = 3;
};

Game.prototype = {
  create: function () {
    var x = this.game.width / 3;
    var y = 2 * (this.game.height / 3);

    this.sky = this.add.tileSprite(0, 0, this.game.width, this.game.width, 'sky');
    this.cityBackground = this.add.tileSprite(0, 0, this.world.width, this.world.height, 'city-background');
    this.cityForeground = this.add.tileSprite(0, 0, this.world.width, this.world.height, 'city-foreground');

    this.testentity = new Player(this.game, x, y);

    var xKey = this.input.keyboard.addKey(Phaser.Keyboard.X);
    xKey.onDown.add(this.testentity.onAttackInput, this.testentity);

    this.rightKey = this.input.keyboard.addKey(Phaser.Keyboard.RIGHT);
    this.leftKey = this.input.keyboard.addKey(Phaser.Keyboard.LEFT);

    this.testentity.rightKey = this.rightKey;
    this.testentity.leftKey = this.leftKey;

    var escKey = this.input.keyboard.addKey(Phaser.Keyboard.ESC);
    escKey.onDown.add(this.onEscInput, this);
  },

  update: function () {
    if (this.testentity.isMovingRight) {
      this.cityBackground.tilePosition.x -= this.backgroundSpeed;
      this.cityForeground.tilePosition.x -= this.foregroundSpeed;
    } else {
    }
  },

  onEscInput: function () {
    this.game.state.start('Menu');
  }
};

module.exports = Game;

},{"../entities/player":"/Users/moret/dev/roosevelt/src/js/entities/player.js"}],"/Users/moret/dev/roosevelt/src/js/states/menu.js":[function(require,module,exports){
var Menu = function () {
  this.text = null;
};

Menu.prototype = {
  create: function () {
    var x = this.game.width / 2;
    var y = this.game.height / 2;

    var style = { font: '3em "Lucida Console", Monaco, monospace', fill: '#ffffff' };
    this.text = this.add.text(x - 300, y - 200, 'esc        start/stop\nx          attack\nleft/right walk', style);

    var escKey = this.input.keyboard.addKey(Phaser.Keyboard.ESC);
    escKey.onDown.add(this.onEscInput, this);
  },

  update: function () {
  },

  onEscInput: function () {
    this.game.state.start(playerState.currentLevel);
  }
};

module.exports = Menu;

},{}],"/Users/moret/dev/roosevelt/src/js/states/preloader.js":[function(require,module,exports){
var Preloader = function (game) {
  this.asset = null;
  this.ready = false;
};

Preloader.prototype = {
  preload: function () {
    this.asset = this.add.sprite(this.game.width / 2, this.game.height / 2, 'preloader');
    this.asset.anchor.setTo(0.5, 0.5);

    this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
    this.load.setPreloadSprite(this.asset);

    this.load.image('sky', 'assets/sky.png');
    this.load.image('city-background', 'assets/city-background.png');
    this.load.image('city-foreground', 'assets/city-foreground.png');

    this.load.json('ninja_atlas', 'assets/ninja.json');
    xxx = this.load.atlasJSONHash('ninja', 'assets/ninja.png', 'assets/ninja.json');
  },

  create: function () {
    this.asset.cropEnabled = false;
  },

  update: function () {
    if (!!this.ready) {
      this.game.state.start('Menu');
    }
  },

  onLoadComplete: function () {
    this.ready = true;
  }
};

module.exports = Preloader;

},{}],"/Users/moret/dev/roosevelt/src/js/states/splash.js":[function(require,module,exports){
var Splash = function () {
};

module.exports = Splash;

Splash.prototype = {
  create: function () {
  }
};
},{}],"/Users/moret/dev/roosevelt/src/js/utils.js":[function(require,module,exports){
var Utils = {
    containsObject: function(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    }
};

module.exports = Utils;
},{}]},{},["./src/js/main.js"])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
